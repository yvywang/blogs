{"pages":[],"posts":[{"title":"ts 泛型","text":"概述我们经常在编写函数时，不仅要支持目前定义的数据类型，同时也要能支持未来的数据类型场景下，泛型可以给你想要的约束。","link":"/blogs/2021/12/15/ts-generics/"},{"title":"ssh 配置","text":"概述这里记录一下在 mac 配置 ssh key 。开发过程中，向 github 的项目提交代码时， github 需要知道你当前设备上有没有 Deploy keys 中某个 public key 配对的 private key。 ssh-keygen ssh-keygen 是一个认证密钥的生成、管理和转换的工具。采用密钥对的形式，生成一个私钥和一个公钥。可以用来做用于远程服务器的链接、Github 的 SSH 链接等。 12##使用 -t 参数创建一个指定密钥的类型并添加注释：$ ssh-keygen -t rsa -C 'testEmail@xxx.com' 参数 描述 -b 指定密钥长度 -e 读取openssh 的私钥或公钥 -f 指定用来保存密钥的文件名 -t 指定要创建的密钥类型 -C 添加注释 生成输出内容： 123456789101112131415161718192021222324252627282930# 提示键入保存密钥的位置，默认是保存在用户目录下的 &quot;.ssh&quot; 文件夹下。&gt; Enter file in which to save the key (/Users/你的用户名/.ssh/id_ed25519):# 提示键入该密钥对的秘密，如果不想每次使用时输入密码，可以直接回车（默认密码为空）&gt; Enter passphrase (empty for no passphrase):# 二次确认，同上一步输入&gt; Enter same passphrase again:&gt; Your identification has been saved in /Users/evan/.ssh/id_ed25519/github. #私钥的存放位置&gt; Your public key has been saved in /Users/evan/.ssh/id_ed25519/github.pub. #公钥的存放位置# 该密钥的指纹，请勿泄漏&gt; The key fingerprint is:&gt; SHA256:ffhbuKjfuHbi2nBjcubnkeHjb5LjbusdeusAjbucu8oo comment #在第一步填写的 描述 会展示在这里，和公钥的末尾# 该密钥的随机图像，请勿泄漏&gt; The key's randomart image is:&gt; +--[ED25519 256]--+&gt; | ..**=+BO* |&gt; |*Bo+o=E . |&gt; |B..o*O.+o. o |&gt; |o@+.* o |&gt; | o .o. S |&gt; | .+. o=. |&gt; | . |&gt; | |&gt; | |&gt; +----[SHA256]-----+# END 配置 Deploy keys将生成的 .pub 后缀文件也就是公钥，添加到 github 或其他 代码托管平台 对应项目的 Deploy keys 中。\\ ssh 服务器默认是去 ssh 找 id_rsa, 现在需要吧我们生成的 key 添加到 ssh-agent 中，这样 ssh 服务器才能匹配找到生成的 key 12# 将 SSH 私钥添加到 ssh-agent，-K 参数指将密码存储在密钥链中$ ssh-add -K ~/.ssh/id_rsa 查看添加结果: 1$ ssh-add -l 调试创建配置文件 ~/.ssh/config 内容如下： 12345678910Host TestSSH.github.com HostName github.com User git PreferredAuthentications publickey IdentityFile ~/.ssh/id_rsa_TestSSH_githubHost YourProjectName.gitlab.com HostName gitlab.com User git PreferredAuthentications publickey IdentityFile ~/.ssh/id_rsa_YourProjectName_gitlab 测试1234$ ssh -T git@TestSSH.github.com# 预期如下：&gt; Hi MrSeaWave/TestSSH! You've successfully authenticated, but GitHub does not provide shell access. 问题在一次重启电脑后，发现拉项目居然拉不下来，一看 ssh-agent 配置的私钥居然没了，后来才发现，每次重启都需要 ssh-add 执行一次，这种解决方式让人泪目，一定有一劳永逸的解决方式 ！ 发现在 linux 手册可以了解到 ssh-add 是把密钥添加到 ssh-agent 的高速缓存中。 那么每次 ssh 鉴权的时候，只要指定了密钥就可以快速验证，既然重启后就没了，那么就可以确定这个高速缓存存储是在内存里的。 一劳永逸的思路有两个 能不能每次打开一个终端时，都跑一次 ssh-add 多次执行会进行覆盖操作，看起来只有性能上有所顾虑 既然每次重启才被清空，那么可不可以每次开机时跑一次 ssh-add 添加一次？ 很明显，第二个方案更符合直觉，简单说一下方案一的操作。每次开一个终端 zsh 都会去加载并且执行 startup 文件，那么我们只需要在这个文件中加入 ssh-add -K xx 即可。 下面讲讲方案二。 在 mac 中有一个 GUI 软件可以设置一些脚本， 它就是 自动操作![聚焦搜索]](https://cdn.jsdelivr.net/gh/yvywang/figure-bed@main/img/202203121812254.png) 打开应用后，在弹出来的窗口中点击新建文稿 在又弹出来的窗口选择应用程序 搜索 shell 后，将 运行Shell脚本 拖到右侧 输入 区域。 在脚本里面输入要执行的语句 ssh-add -K ~/.ssh/xxx，然后点击右上角的运行看是否能通过。 command + s 保存到你想要放置的地方。 在 系统偏好设置 - 用户与群组 - 登陆项 点击下面的 + 号，将刚刚添加的脚本添加到这个列表，这里相当于钩子，每次开机都会执行一次这里的列表任务。 参考 Git - 关于SSH","link":"/blogs/2022/03/11/git-ssh/"},{"title":"husky 使用总结","text":"概述在规范一个项目中，一般都需要操作 git hooks 来达到一些需求， 如规范日志，或检查代码格式 ，本文将介绍使用 husky来实现这一需求。 介绍它在过去的 husky 配置 git hooks 是在我们项目 package.json 中配置。 如下： 12345678{ &quot;husky&quot;: { &quot;hooks&quot;: { &quot;pre-commit&quot;: &quot;npm run test&quot;, &quot;commit-msg&quot;: &quot;commitlint -e $HUSKY_GIT_PARAMS&quot; } }} 为什么它会是过去， husky 为什么放弃这种配置方式，原因如下 ⬇️ husky 为了能够让用户设置任何类型的 git hooks 能正常工作，它就必须要创建所有类型的 git hooks ，这样就能在 git 工作的每个阶段中调用 husky 所设置的脚本， 这个脚本会检查用户是否配置了该 hook ,如果有就会执行用户配置的命令，没有就继续往下执行。 这么做的好处就是任何类型的 hook 都能符合预期的运行，但是缺点也是非常明显，即使用户没有设置任何 hook , husky 也向 git 添加了所有类型的 git hooks。 作者认为这个问题是由于 husky 工作模型的自身缺陷导致的, 要解决只能采用新的工作模型。 新版的 husky 工作原理husky 使用了 git 2.9 开始引入的其中一个新功能core.hooksPath. 它可以指定 git hooks 所在的目录而不是使用默认的 .git/hooks/。 这样的话 husky 就可以将目录部署到自己的 .husky/ 然后使用 husky add 在 .husky/ 目录添加 hook。通过这种方式我们就可以只添加需要的, 并且所有脚本都保存在同一个地方，也就不存在同步文件的问题。 实践 安装 husky 1npm install -D husky package.json 添加 prepare 脚本； 12345{ &quot;scripts&quot;: { &quot;prepare&quot;: &quot;husky install&quot; }} prepare 会在 npm install （不带参数） 之后执行。 husky install 会将.husky/目录指定该目录为 git hooks 所在的目录。 执行下面命令创建 pre-commit git hooks 1npx husky add .husky/pre-commit &quot;npm run test&quot; 执行完会发现 .husky/pre-commit 多了这个shell 脚本，那么现在执行 git commit 命令前会先执行 pre-commit 这个脚本。 举例 在项目中我们会使用 commit-msg 这个git hook 来检查提交的备注信息是否符合规范。 执行如下命令创建 commit-msg hook 使用 commitlint 检查 12345npm install -g @commitlint/cli @commitlint/config-conventionalecho &quot;module.exports = {extends: ['@commitlint/config-conventional']}&quot; &gt; commitlint.config.jsnpx husky add .husky/commit-msg 'npx --no-install commitlint --edit &quot;$1&quot;'","link":"/blogs/2022/03/02/husky/"},{"title":"Markdown 基本语法","text":"概述本文将介绍 Markdown 基本使用语法。 标题语法创建标题时，在单词或短语前添加 # 号， # 号的数量代表了当前标题的级别，例如, ### 即表示创建一个三级标题 &lt;h3 /&gt; 强调语法通过更改文本字体样式来凸显其重点。 粗体 (Bold)加粗文本有两种方式，在单词或短语的前后各添加两个 * 或 _ 。需要注意的是，Markdown 在如何处理单词或短语中间的下划线并不一致，考虑其兼容性，在单词或短语中间部分加粗的话，请使用 *。 Markdown Html preview I just test **bold text** I just test &lt;strong&gt;bold text&lt;/strong&gt; I just test bold text I just test __bold text__ I just test &lt;strong&gt;bold text&lt;/strong&gt; I just test bold text test **bold** text test &lt;strong&gt;bold&lt;/strong&gt; text test bold text 斜体 (Ltalic)同上粗体一样写法，区别在于前后只需要一个 * 或 _ 裹住，同建议使用 * 引用语法创建块引用，在段落前添加一个 &gt; 符号。 1&gt; Dorothy followed her through many of the beautiful rooms in her castle. 效果如下： Dorothy followed her through many of the beautiful rooms in her castle. 多个段落的块引用块引用可以包含多个段落。 为段落之间的空白行添加 &gt; 符号隔开。 123&gt; Dorothy followed her through many of the beautiful rooms in her castle.&gt;&gt; Dorothy followed her through many of the beautiful rooms in her castle. 效果如下： Dorothy followed her through many of the beautiful rooms in her castle. Dorothy followed her through many of the beautiful rooms in her castle. 嵌套块引用块引用可以嵌套。在需要嵌套的段落基于自身的的 &gt; 前多加一个 &gt;。 123&gt; Dorothy followed her through many of the beautiful rooms in her castle.&gt;&gt;&gt; Dorothy followed her through many of the beautiful rooms in her castle. 效果如下： Dorothy followed her through many of the beautiful rooms in her castle. Dorothy followed her through many of the beautiful rooms in her castle. 列表语法可以将多个条目组织成有序或无序列表。 有序列表创建有序列表，请在每个列表项前添加数字并紧跟一个英文句点。 无序列表创建无序列表，在每个列表项前添加 -、*、+ 三选一。 缩进一个或多个列表可嵌套列表。 最佳实践在列表中嵌套其他元素 123456* This is the first list item.* Here's the second list item. &gt; A blockquote would look great below the second list item.* And here's the third list item. 效果如下： This is the first list item. Here’s the second list item. A blockquote would look great below the second list item. And here’s the third list item. 代码预览语法要将语句以代码风格展示，需要将其包裹 `。 例如： 123```Javascriptconst log = 'Hello World'``` 效果如下： 1const log = 'Hello World' 分割线创建分割线，有三种写法，在单独一行上使用多个 *** 、 ---、 ___ 三选一，并且分割线当前行不能包含其他内容。 12345***_______------------- 效果如下： 链接语法链接显示的文案放在中括号内，地址放在括号中，title可选。语法代码：[文案](地址 &quot;可选title&quot;)对应HTML代码：&lt;a href=&quot;地址&quot; title=&quot;可选title&quot;&gt;文案&lt;/a&gt; 1链接： [blogs](https://yvywang.github.io/blogs/ &quot;hover me&quot;) 效果如下链接： blogs 网址和Email地址使用尖括号可以很方便地把URL或者email地址变为可点击的链接。 12&lt;https://yvywang.github.io/blogs/&gt;&lt;fake@example.com&gt; 效果如下：https://yvywang.github.io/blogs/fake@example.com 带格式化的链接强调 链接， 在链接语法前后加上 *。要将链接表示为代码，在方括号添加 ` 123I love supporting the **[EFF](https://eff.org)**.This is the *[blogs](https://yvywang.github.io/blogs/)*.See the section on [`code`](#code). I love supporting the EFF.This is the blogs.See the section on code. 图片语法要添加图片的展示，需要使用 ! , 然后在中括号添加替代文案，图片地址放在圆括号，其后面有可选的title图片标题文案插入图片的 Markdown 语法：![图片alt](图片链接 &quot;图片title&quot;)。对应的 HTML：&lt;img src=&quot;图片链接&quot; alt=&quot;图片alt&quot; title=&quot;图片title&quot;&gt; 带超链接的图片给图片增加链接，拥有跳转的特性，在语法外多加一层中括号，最后面多加一个括号填写超链接地址[![图片alt](图片链接 &quot;图片title&quot;)](https://yvywang.github.io/blogs/) 参考 Markdown 基本语法","link":"/blogs/2022/02/28/markdown-basic/"},{"title":"Markdown 扩展语法","text":"概述基本语法主要是为了应付大多数情况下的日常所需元素，但对于个别人群来说还不够，这就是扩展语法的用武之地，本文将介绍它的使用。 表格要添加表请使用三个或以上连字符 --- 创建每列的标题，并使用管道 ｜ 分隔每列。您可以选择在表的任一端添加管道。 1234| Syntax | Description || --------- | ----------- || Header | Title || Paragraph | Text | 输出如下： Syntax Description Header Title Paragraph Text 对齐标题行的连字符 左侧，右侧，两侧 中添加冒号 : ，将列中的文本对齐到 左侧， 右侧， 或居中。 1234| Syntax | Description | Test Text || :-------- | :---------: | ----------: || Header | Title | Here's this || Paragraph | Text | And more | 输出如下： Syntax Description Test Text Header Title Here’s this Paragraph Text And more Tip: 使用连字符和管道创建表可能很麻烦，为了高效可以尝试使用 Markdown Tables Generator。使用图形界面构建表，填充内容后生成 Markdown 格式的文本复制到文件中。 围栏代码块Markdown基本语法允许您使用一个制表符来创建代码块。如果发现不方便，请尝试使用受保护的代码块。根据 Markdown处理器或编辑器的不同，您将在代码块之前和之后的行上使用三个反引号 ``` 或三个波浪号 ~~~ 。 1234567```{ &quot;firstName&quot;: &quot;John&quot;, &quot;lastName&quot;: &quot;Smith&quot;, &quot;age&quot;: 25}``` 输出如下: 12345{ &quot;firstName&quot;: &quot;John&quot;, &quot;lastName&quot;: &quot;Smith&quot;, &quot;age&quot;: 25} Tip: 要在代码块展示特殊符号，请参阅了解如何转义它们。 语法高亮许多Markdown处理器都支持受围栏代码块的语法突出显示。使用此功能，您可以为编写代码的任何语言添加颜色突出显示。要添加语法突出显示，请在受防护的代码块之前的反引号旁边指定一种语言。 1234567```json{ &quot;firstName&quot;: &quot;John&quot;, &quot;lastName&quot;: &quot;Smith&quot;, &quot;age&quot;: 25}``` 输出如下: 12345{ &quot;firstName&quot;: &quot;John&quot;, &quot;lastName&quot;: &quot;Smith&quot;, &quot;age&quot;: 25} 脚注脚注可以让你添加注释和参考，而不会使文档正文混乱。当您创建脚注时，带有脚注的上标数字会出现在您添加脚注参考的位置。读者可以单击链接以跳至脚注内容区域。 要创建脚注参考，请在语句中插入 [^1] 标识符。这里的 1 就是标识符，标识符可以是数字或单词。脚注按顺序编号。 使用冒号和文本 [^1]: my text 来添加你脚注参考的内容。 不必在文档末尾添加脚注，可以将它们放在除了列表，块引号，表之类的其他元素之外的任何位置。 1234567891011Here's a simple footnote,[^1] and here's a longer one.[^bignote][^1]: This is the first footnote.[^bignote]: Here's one with multiple paragraphs and code. Indent paragraphs to include them in the footnote. `{ my code }` Add as many paragraphs as you like. 标题编号有时候我们想要点击一个关键词，跳到对应的内容区域查看，定义标题编号后使用 Markdown的链接语法可以实现这个需求。 12## My Great Heading {#custom-id}[Heading](#custom-id) 定义列表一些Markdown处理器允许您创建术语及其对应定义的定义列表。要创建定义列表，请在第一行上键入术语。在下一行，键入一个冒号，后跟一个空格和定义。 123456First Term: This is the definition of the first term.Second Term: This is one definition of the second term.: This is another definition of the second term. HTML 看起来像这样 1234567&lt;dl&gt; &lt;dt&gt;First Term&lt;/dt&gt; &lt;dd&gt;This is the definition of the first term.&lt;/dd&gt; &lt;dt&gt;Second Term&lt;/dt&gt; &lt;dd&gt;This is one definition of the second term. &lt;/dd&gt; &lt;dd&gt;This is another definition of the second term.&lt;/dd&gt;&lt;/dl&gt; 输出如下： First TermThis is the definition of the first term.Second Term: This is one definition of the second term.This is another definition of the second term.删除线在单词前后使用两个波浪号 1~~Hello World~~ 输出如下：Hello World 任务列表语法要创建带复选框的项目列表，需要在列表项前添加破折号 - 和 方括号 [ ] ，选中复选框状态请在方括号添加 x, 如 [x]。 1234- [x] Write the press release- [ ] Update the website- [ ] Contact the media 输出如下： Write the press release Update the website Contact the media Emoji 表情有两种方法可以将表情符号添加到Markdown文件中：将表情符号复制并粘贴到Markdown格式的文本中，或者键入emoji shortcodes。 在大多数情况下，可以简单地从 Emojipedia 等来源复制表情粘贴到文档中。 使用表情符号简码一些 Markdown 应用程序允许你通过键入表情符号短代码来插入表情。 1you're so funny :joy: 输出如下： you’re so funny :joy:; Tip: 你可以使用此表情符号简码, 但需要注意的是，简码解析因程序而异。 自动网址链接许多Markdown处理器会自动将URL转换为链接。这意味着如果您输入http://www.example.com，即使您未使用方括号，您的Markdown处理器也会自动将其转换为链接。 http://www.example.com 输出如下：http://www.example.com 禁用自动URL链接如果您比希望自动链接URL，则可以通过反引号代码来显示链接。 1`http://www.example.com` 输出如下：http://www.example.com 参考 Markdown 扩展语法","link":"/blogs/2022/03/03/markdown-expand/"},{"title":"Visual Studio Code 常用快捷键","text":"概述在日常开发中，熟练使用快捷键可以提高开发的效率及体验，本文记录在 Mac 使用编辑器 vscode 中常用的快捷键。 光标移动 Description Shortcut 单词为单位移动到其 ( 前面 / 后面 ) option[⌥] + （ ← / → ） 当前行（ 向上 / 向下）移动一行 option[⌥] + （ ↑ / ↓ ） 移动到当前行最 （ 前面 / 后面 ） command[⌘] + （ ← / → ） 花括号之间跳转 command[⌘] + shift[⇧] + \\ 移动到文档 （ 第一行 / 最后一行 ） command[⌘] + ( ↑ / ↓ ) 文本操作 Description Shortcut 以字符为单位选择文本 shift[⇧] + （ ← / → ） 以单词为单位选择文本 shift[⇧] + option[⌥] + （ ← / → ） 以光标的位置为起点到当前行（ 最前 / 最后） shift[⇧] + command[⌘] + （ ← / → ） 折叠当前文本块 command[⌘] + option[⌥] + ( [ / ] ) 文件、符号、代码之间的快速跳转 Description Shortcut 查看已打开文件列表 control[⌃] 搜索当前打开目录的文件,可选指定行聚焦光标 command[⌘] + P (?:number 跳转到指定行 control[⌃] + G 查看文件的符号（ 函数名… ），可选 : 进行分类 command[⌘] + shift[⇧] + o (?: 查看函数定义位置仅适用于纯 ( TS | JS ) fn + F12 / command[⌘] + fn + F12 Tips:command[⌘] + shift[⇧] + P 打开 Vscode 可配置列表code . 使用 Vsocde 打开当前终端所在的目录","link":"/blogs/2022/03/08/vscode-shortcut/"},{"title":"console 输出","text":"概述在查看日志，输出调试，常用到 console ，这里深入介绍一下它的用法。 占位符 key Description %s 字符串 %d / %i 整数 %f 浮点数 %o 可展开DOM %O 列出DOM的属性 %c css样式格式化输出的字符串 示例 12console.info(&quot;%d年%d月%d日&quot;,2022,03,14);console.log('%c Hello World', 'color: pink; background: blue;') 常见常见的控制台方法： 12345console.log() // - 打印内容的通用方法。console.info() // - 打印资讯类说明信息console.debug() // - 控制台打印 'debug'级别的信息。console.warn() // - 打印一个警告信息。console.error() // - 打印一个错误信息。并显示其堆栈 进阶这一块的方法相对少用，科普一下，起码不能不知道 😄 Console 对象方法 Method Description Demo assert 该方法接受两个参数 ( 表达式, 字符串 ) 只有当表达式不成立，才会输出打印字符串 12console.assert( 1 === 2, &quot;不相等&quot;)// error - Assertion failed: 不相等 clear 清除当前控制台的所有输出，将光标回置到第一行 1console.clear() group 将打印的信息进行分组，可以折叠和展开查看 1234console.group('ul') console.warn('warn') console.error('error')console.groupEnd() groupCollapsed 和 group 方法类似，唯一区别就是初始状态是折叠的 1234console.groupCollapsed('ul'); console.warn('warn') console.error('error')console.groupEnd(); table 将复合类型的数据转为表格显示 123456const obj = { a:{ num: &quot;1&quot;}, b:{ num: &quot;2&quot;}, c:{ num: &quot;3&quot; }}console.table(obj) time 通常用来计时，和 timeEnd 搭配使用 123console.time('timer')// code...console.timeEnd('timer') trace 追踪函数的调用过程 123const fun = () =&gt; console.trace()const a = () =&gt; fun()const res = a() count 用于计数，每执行一次 count 所标记的 字符串 都会打印当前执行的次数 12345678let count = 10while(count--){ console.count('test')}// log - test: 1// log - test: 2// ······// log - test: 10 参考 JavaScript Console 对象","link":"/blogs/2022/03/14/js-console/"},{"title":"package 文档","text":"概述本文简单说一些 package.json 使用的点。 Scripts 脚本 Script Description prepublish publish or npm install（ 不带参数 ） 前执行 prepare prepublish后， prepublishOnly 前 or npm install（ 不带参数 ） 前 执行 prepublishOnly publish 前执行 publish, postpublish publish 后执行 preinstall install 前执行 install, postinstall npm install 后执行 preuninstall, uninstall npm uninstall 前执行 postuninstall npm uninstall 后执行 preversion npm version xxx 前执行 (更新版本) version 更新版本,提交 commit 前执行 postversion 更新版本，提交 commit 后执行 pretest, posttest npm test 的勾子 prestop, poststop npm stop 的勾子 prestart, poststart npm start 的勾子 prerestart, postrestart npm restart 的勾子（ 如无配置 restart， 则会执行 start &amp;&amp; stop ） preshrinkwrap, postshrinkwrap npm shrinkwrap 的勾子（ 用于固定依赖版本 ） Tips: 所有的 script 都有自己的 pre, post 勾子，执行配置的 scripts 时，会自动匹配执行对应的勾子；依赖包里面 package.json 的 scripts 可以用 npm explore &lt;pkg&gt; -- npm run &lt;script&gt; 执行 参考 npm Docs - scripts","link":"/blogs/2022/03/15/package/"}],"tags":[{"name":"TypeScript","slug":"TypeScript","link":"/blogs/tags/TypeScript/"},{"name":"ssh","slug":"ssh","link":"/blogs/tags/ssh/"},{"name":"husky","slug":"husky","link":"/blogs/tags/husky/"},{"name":"Markdown","slug":"Markdown","link":"/blogs/tags/Markdown/"},{"name":"vscode","slug":"vscode","link":"/blogs/tags/vscode/"},{"name":"JavaScript","slug":"JavaScript","link":"/blogs/tags/JavaScript/"},{"name":"package","slug":"package","link":"/blogs/tags/package/"}],"categories":[{"name":"git","slug":"git","link":"/blogs/categories/git/"},{"name":"husky","slug":"husky","link":"/blogs/categories/husky/"},{"name":"Markdown","slug":"Markdown","link":"/blogs/categories/Markdown/"},{"name":"ssh","slug":"git/ssh","link":"/blogs/categories/git/ssh/"},{"name":"vscode","slug":"vscode","link":"/blogs/categories/vscode/"},{"name":"basic","slug":"Markdown/basic","link":"/blogs/categories/Markdown/basic/"},{"name":"advanced","slug":"Markdown/advanced","link":"/blogs/categories/Markdown/advanced/"},{"name":"shortcut","slug":"vscode/shortcut","link":"/blogs/categories/vscode/shortcut/"},{"name":"JavaScript","slug":"JavaScript","link":"/blogs/categories/JavaScript/"},{"name":"console","slug":"JavaScript/console","link":"/blogs/categories/JavaScript/console/"},{"name":"node","slug":"node","link":"/blogs/categories/node/"},{"name":"package","slug":"node/package","link":"/blogs/categories/node/package/"}]}